<?php

namespace Application\Migrations;

use Doctrine\DBAL\Migrations\AbstractMigration,
    Doctrine\DBAL\Schema\Schema;

/**
 * NOTE: This is a special migration... it was added 2012-06-08 but is marked as Version20111027000000
 * because this is the date that doctrine migrations was added to the project.  This migration bridges
 * the gap between a completely empty database and the first chronologically added migration
 * "Version20111027095324.php".  This migration is intended to be safe to run on existing systems
 * because of the SkipIf check at the start of up.
 *
 * NOTE: This migration was generated against the code in commit:
 *
 *      commit 7842bff8d65d80c7666e25ea3b838aa298451581
 *      Author: Ryan Weaver <ryan@thatsquality.com>
 *      Date:   Thu Oct 27 09:53:14 2011 -0500
 *
 *      Adding Doctrine migrations
 *
 * NOTE: One extra line was added to up and down (versus a doc:mig:diff against
 * 7842bff8d65d80c7666e25ea3b838aa298451581) and that was creating the `metro_area` table (and removing
 * it in the down), this was required because the migration that comes after this actually removes `metro_area`
 * (although `metro_area` never exists in the code for 7842bff8d65d80c7666e25ea3b838aa298451581).
 */
class Version20111027000000 extends AbstractMigration
{
    public function up(Schema $schema)
    {
        // this up() migration is autogenerated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql");

        $result     = $this->connection->fetchAll("SHOW TABLES");
        $tableCount = count($result);

        # NOTE: This ensures $this->skipIf check ensures that this migration will NOT be run on databases that already
        # have tables.
        #
        # NOTE: $this->skipIf adds this version to the migrations table even if it skips.
        #
        # NOTE: The condition > 1 is intended and should NOT be changed to > 0 because different versions of
        # doctrine migrations auto-create the migrations table at different times (can happen BEFORE or AFTER
        # the first database query) in other words we are allowing one table to exist (which we expect to be
        # the migrations table).  This could be cleaned up to iterate the table list and check for it specifically,
        # but I don't think that is required as the database will never have just one table unless of course it's
        # an empty database with a migrations table - in which case the logic holds up.
        $this->skipIf($tableCount > 1, "This migration can only be applied if the database is empty.");

        $this->addSql("CREATE TABLE event (id INT AUTO_INCREMENT NOT NULL, name VARCHAR(255) NOT NULL, slug VARCHAR(255) NOT NULL, ready TINYINT(1) NOT NULL, published TINYINT(1) NOT NULL, starts_at DATETIME NOT NULL, ends_at DATETIME NOT NULL, city VARCHAR(255) DEFAULT NULL, country VARCHAR(255) DEFAULT NULL, location VARCHAR(255) DEFAULT NULL, content LONGTEXT DEFAULT NULL, hosted_by VARCHAR(255) DEFAULT NULL, game VARCHAR(255) DEFAULT NULL, locale VARCHAR(2) NOT NULL, bannerImage VARCHAR(255) DEFAULT NULL, PRIMARY KEY(id)) ENGINE = InnoDB");
        $this->addSql("CREATE TABLE fos_user (id INT AUTO_INCREMENT NOT NULL, username VARCHAR(255) NOT NULL, username_canonical VARCHAR(255) NOT NULL, email VARCHAR(255) NOT NULL, email_canonical VARCHAR(255) NOT NULL, enabled TINYINT(1) NOT NULL, algorithm VARCHAR(255) NOT NULL, salt VARCHAR(255) NOT NULL, password VARCHAR(255) NOT NULL, last_login DATETIME DEFAULT NULL, locked TINYINT(1) NOT NULL, expired TINYINT(1) NOT NULL, expires_at DATETIME DEFAULT NULL, confirmation_token VARCHAR(255) DEFAULT NULL, password_requested_at DATETIME DEFAULT NULL, roles LONGTEXT NOT NULL COMMENT '(DC2Type:array)', credentials_expired TINYINT(1) NOT NULL, credentials_expire_at DATETIME DEFAULT NULL, firstname VARCHAR(255) DEFAULT NULL, lastname VARCHAR(255) DEFAULT NULL, birthdate DATE DEFAULT NULL, phone_number VARCHAR(255) DEFAULT NULL, country VARCHAR(255) DEFAULT NULL, state VARCHAR(255) DEFAULT NULL, has_alienware_system TINYINT(1) DEFAULT NULL, latest_news_source VARCHAR(255) DEFAULT NULL, subscribed_gaming_news TINYINT(1) DEFAULT NULL, avatar VARCHAR(255) DEFAULT NULL, type VARCHAR(255) DEFAULT NULL, manufacturer VARCHAR(255) DEFAULT NULL, operatingSystem VARCHAR(255) DEFAULT NULL, cpu VARCHAR(255) DEFAULT NULL, memory VARCHAR(255) DEFAULT NULL, videoCard VARCHAR(255) DEFAULT NULL, soundCard VARCHAR(255) DEFAULT NULL, hardDrive VARCHAR(255) DEFAULT NULL, headphones VARCHAR(255) DEFAULT NULL, mouse VARCHAR(255) DEFAULT NULL, mousePad VARCHAR(255) DEFAULT NULL, keyboard VARCHAR(255) DEFAULT NULL, monitor VARCHAR(255) DEFAULT NULL, avatar_approved TINYINT(1) NOT NULL, UNIQUE INDEX UNIQ_957A647992FC23A8 (username_canonical), UNIQUE INDEX UNIQ_957A6479A0D96FBF (email_canonical), PRIMARY KEY(id)) ENGINE = InnoDB");
        $this->addSql("CREATE TABLE user_event (user_id INT NOT NULL, event_id INT NOT NULL, INDEX IDX_D96CF1FFA76ED395 (user_id), INDEX IDX_D96CF1FF71F7E88B (event_id), PRIMARY KEY(user_id, event_id)) ENGINE = InnoDB");
        $this->addSql("CREATE TABLE comment (id INT AUTO_INCREMENT NOT NULL, thread_id VARCHAR(255) DEFAULT NULL, author_id INT DEFAULT NULL, body VARCHAR(255) NOT NULL, ancestors VARCHAR(1024) NOT NULL, depth INT NOT NULL, created_at DATETIME NOT NULL, INDEX IDX_9474526CE2904019 (thread_id), INDEX IDX_9474526CF675F31B (author_id), PRIMARY KEY(id)) ENGINE = InnoDB");
        $this->addSql("CREATE TABLE Thread (id VARCHAR(255) NOT NULL, permalink VARCHAR(255) NOT NULL, is_commentable TINYINT(1) NOT NULL, num_comments INT NOT NULL, last_comment_at DATETIME DEFAULT NULL, PRIMARY KEY(id)) ENGINE = InnoDB");
        $this->addSql("CREATE TABLE metro_area (id VARCHAR(255) NOT NULL) ENGINE = InnoDB");
        $this->addSql("ALTER TABLE user_event ADD CONSTRAINT FK_D96CF1FFA76ED395 FOREIGN KEY (user_id) REFERENCES fos_user(id) ON DELETE CASCADE");
        $this->addSql("ALTER TABLE user_event ADD CONSTRAINT FK_D96CF1FF71F7E88B FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE");
        $this->addSql("ALTER TABLE comment ADD CONSTRAINT FK_9474526CE2904019 FOREIGN KEY (thread_id) REFERENCES Thread(id)");
        $this->addSql("ALTER TABLE comment ADD CONSTRAINT FK_9474526CF675F31B FOREIGN KEY (author_id) REFERENCES fos_user(id)");
    }

    public function down(Schema $schema)
    {
        // this down() migration is autogenerated, please modify it to your needs
        $this->abortIf($this->connection->getDatabasePlatform()->getName() != "mysql");

        $this->addSql("ALTER TABLE user_event DROP FOREIGN KEY FK_D96CF1FF71F7E88B");
        $this->addSql("ALTER TABLE user_event DROP FOREIGN KEY FK_D96CF1FFA76ED395");
        $this->addSql("ALTER TABLE comment DROP FOREIGN KEY FK_9474526CF675F31B");
        $this->addSql("ALTER TABLE comment DROP FOREIGN KEY FK_9474526CE2904019");
        $this->addSql("DROP TABLE event");
        $this->addSql("DROP TABLE fos_user");
        $this->addSql("DROP TABLE user_event");
        $this->addSql("DROP TABLE comment");
        $this->addSql("DROP TABLE Thread");
        $this->addSql("DROP TABLE metro_area");
    }
}
