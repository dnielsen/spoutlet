<?php

namespace Platformd\GiveawayBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Platformd\UserBundle\Entity\User;
use Platformd\GiveawayBundle\Entity\Giveaway;
use Doctrine\ORM\QueryBuilder;

/**
 * MachineCodeEntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MachineCodeEntryRepository extends EntityRepository
{
    /**
     * Returns all entries related to the User that do *not* yet have a giveaway key associated with them
     *
     * @param \Platformd\UserBundle\Entity\User $user
     * @return \Platformd\GiveawayBundle\Entity\MachineCodeEntry[]
     */
    public function findAssignedToUserWithoutGiveawayKey(User $user)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addUserQueryBuilder($user, $qb);

        return $qb
            ->andWhere('mce.key IS NULL')
            ->getQuery()
            ->execute()
        ;
    }

     /**
     * Returns all entries related to the User that do *not* yet have a giveaway key associated with them but that are
     * specific to a particular giveaway
     *
     * @param \Platformd\UserBundle\Entity\User $user
     * @param Giveaway $giveaway
     * @return \Platformd\GiveawayBundle\Entity\MachineCodeEntry[]
     */
    public function findAssignedToUserWithoutGiveawayKeyForGiveaway(User $user, Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addUserQueryBuilder($user, $qb);
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        return $qb
            ->andWhere('mce.key IS NULL')
            ->getQuery()
            ->execute()
        ;
    }

    public function findPendingUserEntriesForGiveaway(User $user, Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addUserQueryBuilder($user, $qb);
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        return $qb
            ->andWhere('mce.status = :statusPending')
            ->setParameter('statusPending', MachineCodeEntry::STATUS_PENDING)
            ->andWhere('mce.key IS NULL')
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * Returns all the entries this user has for this giveaway.
     *
     * Should be 0 or 1, but technically could be many
     *
     * @param \Platformd\UserBundle\Entity\User $user
     * @param Giveaway $giveaway
     * @return \Platformd\GiveawayBundle\Entity\MachineCodeEntry[]
     */
    public function findAssignedToUserForGiveaway(User $user, Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addUserQueryBuilder($user, $qb);
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        return $qb->getQuery()->execute();
    }

    public function findAllActiveOrPendingForUserAndGiveaway(User $user, Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addUserQueryBuilder($user, $qb);
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        $qb->andWhere('mce.status = :statusApproved OR mce.status = :statusPending')
            ->setParameter('statusApproved', MachineCodeEntry::STATUS_APPROVED)
            ->setParameter('statusPending', MachineCodeEntry::STATUS_PENDING);

        return $qb->getQuery()->execute();
    }

    public function findPendingForGiveaway(Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        return $qb
            ->andWhere('mce.status = :status')
            ->setParameter('status', MachineCodeEntry::STATUS_PENDING)
            ->getQuery()
            ->execute()
        ;
    }

    public function findApprovedAndDeniedForGiveaway(Giveaway $giveaway)
    {
        $qb = $this->createQueryBuilder('mce');
        $this->addGiveawayQueryBuilder($giveaway, $qb);

        return $qb
            ->andWhere('mce.status = :statusDenied OR mce.status = :statusApproved')
            ->setParameter('statusDenied', MachineCodeEntry::STATUS_DENIED)
            ->setParameter('statusApproved', MachineCodeEntry::STATUS_APPROVED)
            ->orderBy('mce.created')
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * @param \Platformd\UserBundle\Entity\User $user
     * @param \Doctrine\ORM\QueryBuilder $qb
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function addUserQueryBuilder(User $user, QueryBuilder $qb)
    {
        return $qb->andWhere('mce.user = :user')
            ->setParameter('user', $user)
        ;
    }

    /**
     * @param Giveaway $giveaway
     * @param \Doctrine\ORM\QueryBuilder $qb
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function addGiveawayQueryBuilder(Giveaway $giveaway, QueryBuilder $qb)
    {
        return $qb->andWhere('mce.giveaway = :giveaway')
            ->setParameter('giveaway', $giveaway)
        ;
    }
}
