<?php

namespace Platformd\SpoutletBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Platformd\SpoutletBundle\Entity\GamePage;

/**
 * GamePageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GamePageRepository extends EntityRepository
{
    /**
     * @param string $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage[]
     */
    public function findAllForSiteNewestFirst($site)
    {
        return $this->createSiteQueryBuilder($site)
            ->addOrderBy('gp.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    /**
     * @param integer $age
     * @param string $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage[]
     */
    public function findActiveGamesForAge($age, $site)
    {
        // we don't use the age yet

        $qb = $this->createSiteQueryBuilder($site);
        $this->addPublishedQueryBuilder($qb);

        return $qb
            ->addOrderBy('gp.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    /**
     * @param $age
     * @param $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage
     */
    public function findMostRecentGameForAge($age, $site)
    {
        // we don't use the age yet

        $qb = $this->createSiteQueryBuilder($site);
        $this->addPublishedQueryBuilder($qb);

        return $qb
            ->addOrderBy('gp.createdAt', 'DESC')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage[]
     */
    public function findArchivesForSite($site)
    {
        $qb = $this->createSiteQueryBuilder($site);
        $this->addArchivedQueryBuilder($qb);

        return $qb
            ->addOrderBy('gp.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    /**
     * @param string $slug
     * @param string $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage
     */
    public function findOneBySlugForSite($slug, $site)
    {
        return $this->createSiteQueryBuilder($site)
            ->andWhere('gp.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param \Platformd\SpoutletBundle\Entity\Game $game
     * @param string $site
     * @return \Platformd\SpoutletBundle\Entity\GamePage
     */
    public function findOneByGame($game, $site)
    {
        return $this->createSiteQueryBuilder($site)
            ->andWhere('gp.game = :game')
            ->setParameter('game', $game)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }

    public function findAllGamePagesWhereIdNotIn($inArray, $site) {

        $qb = $this->createSiteQueryBuilder($site)
            ->leftJoin('gp.game', 'g')
            ->andWhere('gp.id NOT IN (:inArray)')
            ->andWhere('gp.status = :status')
            ->addOrderBy('gp.createdAt', 'DESC')
            ->setParameter('status', GamePage::STATUS_PUBLISHED)
            ->setParameter('inArray', $inArray);

        return $qb->getQuery()->execute();
    }

    public function findAllByGamePagesByCategory($category, $site, $limit = null)
    {
        $qb = $this->createSiteQueryBuilder($site)
            ->leftJoin('gp.game', 'g')
            ->andWhere('g.category = :category')
            ->andWhere('gp.status = :status')
            ->setParameter('category', $category)
            ->setParameter('status', GamePage::STATUS_PUBLISHED);

        if ($limit != null) {
            $qb->setMaxResults($limit);
        }

        return $qb->addOrderBy('gp.createdAt', 'DESC')->getQuery()->execute();
    }

    /**
     * @param $site
     * @return \Doctrine\ORM\QueryBuilder
     */
    private function createSiteQueryBuilder($site)
    {
        return $this->createQueryBuilder('gp')
            ->leftJoin('gp.gamePageLocales', 'gpl')
            ->andWhere('gpl.locale = :site')
            ->setParameter('site', $site);
    }

    private function addPublishedQueryBuilder(QueryBuilder $qb)
    {
        return $qb->andWhere('gp.status = :status')
            ->setParameter('status', GamePage::STATUS_PUBLISHED);
    }

    private function addArchivedQueryBuilder(QueryBuilder $qb)
    {
        return $qb->andWhere('gp.status = :status')
            ->setParameter('status', GamePage::STATUS_ARCHIVED);
    }
}
