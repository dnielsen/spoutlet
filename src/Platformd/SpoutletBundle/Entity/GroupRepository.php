<?php

namespace Platformd\SpoutletBundle\Entity;

use Platformd\SpoutletBundle\Entity\Group;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use DateTime;
use DateTimeZone;

/**
 * GroupsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends EntityRepository
{
    public function getAllGroupsForUser($user) {
        return $this->getEntityManager()->createQuery('
            SELECT g FROM SpoutletBundle:Group g
            LEFT JOIN g.members m
            WHERE g.deleted = false
            AND m.id = :userId
            ORDER BY g.name')
            ->setParameter('userId', $user->getId())
            ->execute();
    }

    public function getGroupAndMemberCountByRegion() {

        return $this->getEntityManager()->createQuery('
            SELECT s.name region, COUNT(DISTINCT g.id) groups, COUNT(DISTINCT m.id) members FROM SpoutletBundle:Group g
            LEFT JOIN g.sites s
            LEFT JOIN g.members m
            WHERE g.deleted = false
            GROUP BY s.id')
            ->execute();
    }

    public function findAllGroupsRelevantForSite($site) {

        return $this->getEntityManager()->createQuery('
            SELECT g FROM SpoutletBundle:Group g
            LEFT JOIN g.sites s
            WHERE g.deleted = false
            AND (g.allLocales = true OR s = :site)')
            ->setParameter('site', $site)
            ->execute();
    }

    public function findGroupsByName($groupName)
    {
        $qb = $this->createQueryBuilder('g')
            ->where('g.name like :groupName')
            ->andWhere('g.deleted = false')
            ->setParameter('groupName', '%'.$groupName.'%');

        return $qb->getQuery()->execute();
    }

    public function findGroupsByNameAndSite($groupName, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->where('g.name like :groupName')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->setParameter('groupName', '%'.$groupName.'%')
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function findGroupsByCategoryAndSite($category, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->where('g.category = :category')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->setParameter('category', $category)
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function findMostRecentlyCreatedGroupsForSite($site, $limit=10)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->addOrderBy('g.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function findMostPopularGroupsForSite($site, $limit=10)
    {
        $query = '
        SELECT
            pd_groups.`id` AS group_id,
            pd_groups.`name` AS group_name,
            pd_group_site.group_id,
            (
                SELECT
                    COUNT(*)
                FROM
                    pd_groups_members
                WHERE
                    pd_groups.id = group_id
            ) AS member_count
        FROM
            pd_groups
        INNER JOIN pd_group_site ON pd_group_site.group_id = pd_groups.id
        WHERE
            pd_group_site.site_id = :site
        AND pd_groups.deleted = 0
        ORDER BY
            member_count DESC
        LIMIT 10';

        $stmt = $this->getEntityManager()
                     ->getConnection()
                     ->prepare($query);

        $stmt->bindValue('site', $site->getId());

        $stmt->execute();

        return $stmt->fetchAll();
    }
}
