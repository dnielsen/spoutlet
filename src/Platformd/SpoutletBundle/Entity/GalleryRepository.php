<?php

namespace Platformd\SpoutletBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * GalleryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GalleryRepository extends EntityRepository
{
    public function findAllAlphabetically() {
        return $this->createQueryBuilder('g')
            ->orderBy('g.name', 'ASC')
            ->getQuery()
            ->execute();
    }

    public function findAllGalleriesByCategory($category)
    {
        return $this->createQueryBuilder('ga')
            ->leftJoin('ga.categories', 'cat')
            ->where('cat.name = :category')
            ->orderBy('ga.name', 'ASC')
            ->setParameter('category', $category)
            ->getQuery()
            ->execute();
    }

    public function findAllGalleriesByCategoryForSite($site, $category='image')
    {
        $result = $this->createQueryBuilder('ga')
            ->leftJoin('ga.categories', 'cat')
            ->leftJoin('ga.sites', 's')
            ->where('cat.name = :category')
            ->andWhere('s = :site')
            ->orderBy('ga.name', 'ASC')
            ->setParameter('category', $category)
            ->setParameter('site', $site)
            ->getQuery()
            ->execute();

        return $result;
    }

    public function findAllGalleriesByCategoryForSiteSortedByPosition($site, $category='image', $includeDeleted=false)
    {
        $qb = $this->createQueryBuilder('ga')
            ->leftJoin('ga.categories', 'cat')
            ->leftJoin('ga.sites', 's')
            ->where('cat.name = :category')
            ->andWhere('s = :site')
            ->orderBy('ga.name', 'ASC')
            ->setParameter('category', $category)
            ->setParameter('site', $site);

        if (!$includeDeleted) {
            $qb->andWhere('ga.deleted = false');
        }

        $results = $qb->getQuery()
            ->execute();

        $positions = array();
        $galleriesList = array();
        $galleries = array();

        foreach($results as $gallery) {
            $sitesPositions = $gallery->getSitesPositions();
            $positions[$gallery->getId()] = $sitesPositions[$site->getId()];
            $galleriesList[$gallery->getId()] = $gallery;
        }

        asort($positions);

        foreach($positions as $galleryId => $value) {
            $galleries[] = $galleriesList[$galleryId];
        }

        return $galleries;
    }

    public function findAllImageGalleriesForSite($site, $includeDeleted = false)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->leftJoin('g.categories', 'c')
            ->andWhere('s = :site')
            ->andWhere('c.name = :image')
            ->setParameter('site', $site)
            ->setParameter('image', 'image');

        if (!$includeDeleted) {
            $qb->andWhere('g.deleted = false');
        }

        return $qb->getQuery()
            ->execute();
    }

    public function findAllGalleries($galleryIds)
    {
        $qb = $this->createQueryBuilder('g');

        return $qb->where($qb->expr()->in('g.id', $galleryIds))
            ->getQuery()
            ->execute();
    }

    public function findOneBySlug($slug)
    {
        return $this->createQueryBuilder('g')
            ->where('g.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
