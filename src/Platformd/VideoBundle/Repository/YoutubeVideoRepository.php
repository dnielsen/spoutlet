<?php

namespace Platformd\VideoBundle\Repository;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query
;

use DateTime,
    DateInterval
;

use Pagerfanta\Pagerfanta,
    Pagerfanta\Adapter\DoctrineORMAdapter
;

/**
 * YoutubeVideoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class YoutubeVideoRepository extends EntityRepository
{
    public function findVideosByUser($user, $limit = 9, $id = 0)
    {
        return $this->createQueryBuilder('yt')
            ->where('yt.author = :user')
            ->andWhere('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('yt.id <> :id')
            ->orderBy('yt.createdAt', 'DESC')
            ->setParameter('user', $user)
            ->setParameter('id', $id)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findUserAccountVideos($user, $maxPerPage = 10, $currentPage = 1)
    {
        $qb = $this->createQueryBuilder('yt')
            ->where('yt.author = :user')
            ->andWhere('yt.deleted <> 1')
            ->orderBy('yt.createdAt', 'DESC')
            ->setParameter('user', $user);

        $adapter = new DoctrineORMAdapter($qb);
        $pager = new Pagerfanta($adapter);
        $pager->setMaxPerPage($maxPerPage)->setCurrentPage($currentPage);

        return $pager;
    }

    public function findCurrentlyWatchedVideos($site, $limit = 9, $numberOfDays = 7)
    {
        $daysAgo = new DateTime('now');
        $daysAgo->add(DateInterval::createFromDateString(sprintf('-%s days', $numberOfDays)));

        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.galleries', 'g')
            ->leftJoin('g.sites', 's')
            ->andWhere('s = :site')
            ->andWhere('yt.deleted <> 1')
            ->andWhere('yt.lastViewedAt >= :daysAgo')
            ->orderBy('yt.lastViewedAt', 'DESC')
            ->setParameter('daysAgo', $daysAgo)
            ->setParameter('site', $site)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findCurrentlyWatchedVideosForCountry($site, $country, $limit = 9, $numberOfDays = 7)
    {
        $videos = $this->findCurrentlyWatchedVideos($site, $limit, $numberOfDays);

        return $this->processResultsForCountry($videos, $country);
    }

    public function findPopularVideos($site, $limit = 9)
    {
        $videos = array();

        $results = $this->createQueryBuilder('yt')
            ->select('yt, COUNT(DISTINCT v.id) voteCount')
            ->leftJoin('yt.galleries', 'g')
            ->leftJoin('g.sites', 's')
            ->leftJoin('yt.votes', 'v')
            ->where('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('s = :site')
            ->groupBy('yt.id')
            ->addOrderBy('voteCount', 'DESC')
            ->setParameter('site', $site)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();

        // well, adding in the aggregate returns an assoc array, but I really only want the videos...
        foreach ($results as $key => $value) {
            array_push($videos, $value[0]);
        }

        return $videos;
    }

    public function findPopularVideosForCountry($site, $country, $limit = 9)
    {
        $videos = $this->findPopularVideos($site, $limit);

        return $this->processResultsForCountry($videos, $country);
    }

    public function findFeaturedVideos($site, $limit = 9)
    {
        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.galleries', 'g')
            ->leftJoin('g.sites', 's')
            ->where('yt.featured = 1')
            ->andWhere('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('s = :site')
            ->setParameter('site', $site)
            ->orderBy('yt.featuredAt', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findFeaturedVideosForCountry($site, $country, $limit = 9)
    {
        $videos = $this->createQueryBuilder('yt')
            ->addSelect('c')
            ->leftJoin('yt.restrictionCountries', 'c')
            ->leftJoin('yt.galleries', 'g')
            ->leftJoin('g.sites', 's')
            ->where('yt.featured = 1')
            ->andWhere('s = :site')
            ->andWhere('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->orderBy('yt.featuredAt', 'DESC')
            ->setParameter('site', $site)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();

        return $this->processResultsForCountry($videos, $country);
    }

    public function findVideosByCategory($category, $limit = 3)
    {
        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.galleries', 'c')
            ->where('c = :category')
            ->andWhere('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->setParameter('category', $category)
            ->setMaxResults($limit)
            ->getQuery()
            ->execute();
    }

    public function findVideosByCategoryForCountry($category, $country, $limit = 3)
    {
        $videos = $this->findVideosByCategory($category, $limit);

        return $this->processResultsForCountry($videos, $country);
    }

    public function findPopularVideosByCategory($category)
    {
        $videos = array();

        $results = $this->createQueryBuilder('yt')
            ->select('yt, COUNT(DISTINCT v.id) voteCount')
            ->leftJoin('yt.galleries', 'c')
            ->leftJoin('yt.votes', 'v')
            ->where('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('c = :category')
            ->groupBy('yt.id')
            ->addOrderBy('voteCount', 'DESC')
            ->setParameter('category', $category)
            ->getQuery()
            ->execute();

        // well, adding in the aggregate returns an assoc array, but I really only want the videos...
        foreach ($results as $key => $value) {
            array_push($videos, $value[0]);
        }

        return $videos;
    }

    public function findPopularVideosByCategoryForCountry($category, $country)
    {
        $videos = $this->findPopularVideosByCategory($category);

        return $this->processResultsForCountry($videos, $country);
    }

    public function findCurrentlyWatchedVideosByCategory($category, $numberOfDays = 7)
    {
        $daysAgo = new DateTime('now');
        $daysAgo->add(DateInterval::createFromDateString(sprintf('-%s days', $numberOfDays)));

        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.galleries', 'c')
            ->where('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('yt.lastViewedAt >= :daysAgo')
            ->andWhere('c = :category')
            ->orderBy('yt.lastViewedAt', 'DESC')
            ->setParameter('daysAgo', $daysAgo)
            ->setParameter('category', $category)
            ->getQuery()
            ->execute();
    }

    public function findCurrentlyWatchedVideosByCategoryForCountry($category, $country, $numberOfDays = 7)
    {
        $videos = $this->findCurrentlyWatchedVideosByCategory($category, $numberOfDays);

        return $this->processResultsForCountry($videos, $country);
    }

    public function findVideoMetrics($fromDate, $thruDate, $keyWords)
    {
        $qb = $this->createQueryBuilder('yt');
        $qb->select('yt, COUNT(ytv.id) voteCount');
        $qb->leftJoin('yt.votes', 'ytv');
        $qb->leftJoin('yt.author', 'yta');

        if($keyWords) {
            $qb->andWhere('yt.title like :keyWords or yta.username like :keyWords');
            $qb->setParameter('keyWords', '%'.$keyWords.'%');
        }

        if($fromDate) {
            $qb->andWhere('yt.createdAt >= :fromDate');
            $qb->setParameter('fromDate', $fromDate);
        }

        if($thruDate) {
            $qb->andWhere('yt.createdAt <= :thruDate');
            $qb->setParameter('thruDate', $thruDate);
        }

        $qb->groupBy('yt.id');

        return $qb->getQuery()->getResult();
    }

    public function findVideosForGroup($group)
    {
        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.groups', 'g')
            ->where('yt.deleted <> 1')
            ->andWhere('yt.isAccessible = 1')
            ->andWhere('g IN (:group)')
            ->setParameter('group', $group)
            ->orderBy('yt.createdAt', 'DESC')
            ->getQuery()
            ->execute();
    }

    public function findAllSortedByCheckDate()
    {
        return $this->createQueryBuilder('yt')
            ->orderBy('yt.restrictionsChecked', 'ASC')
            ->getQuery()
            ->execute();
    }

    private function processResultsForCountry($results, $country)
    {
        $return = array();

        foreach ($results as $video) {
            if ($video->getRestrictionType() !== null) {

                $allowed    = $video->getRestrictionType() == 1 && !$video->getRestrictionCountries()->contains($country);
                $disallowed = $video->getRestrictionType() == 0 && $video->getRestrictionCountries()->contains($country);

                if ($allowed && !$disallowed) {
                    $return[] = $video;
                }

            } else {
                $return[] = $video;
            }
        }

        return $return;
    }

    public function findOneByYoutubeIdInCategory($youtubeId, $category)
    {
        return $this->createQueryBuilder('yt')
            ->leftJoin('yt.galleries', 'g')
            ->andWhere('g = :category')
            ->andWhere('yt.youtubeId = :youtubeId')
            ->setParameter('category', $category)
            ->setParameter('youtubeId', $youtubeId)
            ->getQuery()
            ->getResult();
    }
}
