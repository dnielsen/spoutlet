<?php

namespace Platformd\IdeaBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Platformd\IdeaBundle\Entity\VoteCriteria;
/**
 * IdeaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IdeaRepository extends EntityRepository
{

    /**
     * @param $event
     * @param null $tag
     * Filters idea list by event, current round, optional tag, and isPrivate
     * @return array
     */
    public function filter($eventId, $round, $tag = null, $private = false) {

         $qb = $this->createQueryBuilder('i')
            ->select      ('i')
            ->where       ('i.event = :eventId')
            ->andWhere    ('i.highestRound >= :round')
            ->andWhere    ('i.isPrivate = :private')
            ->setParameters(
                 array(
                     'eventId' => $eventId,
                     'round' => $round,
                     'private' => $private,
                 ));



		if(!is_null($tag) && $tag <> '') {
			$qb->innerJoin('i.tags', 't', 'WITH', 't.tagName = :tag')->setParameter('tag', $tag);
		}

		return $qb->getQuery()->getResult();
	}

    public function toCSV() {

        foreach($this->findAll() as $idea) {
            echo "\"".addslashes($idea->getId())."\",";
            echo "\"".addslashes($idea->getEvent())."\",";
            echo "\"".addslashes($idea->getCreator()->getUsername())."\",";
            echo "\"".addslashes($idea->getName())."\",";
            echo "\"".addslashes($idea->getCreatedAt()->format('Y-m-d H:i:s'))."\",";
            echo "\"".addslashes($idea->getDescription())."\",";
            echo "\"".addslashes($idea->getStage())."\",";
            echo "\"".addslashes($idea->getForCourse())."\",";
            echo "\"".addslashes($idea->getProfessors())."\",";
            echo "\"".addslashes($idea->getAmount())."\",";
            echo "\"".addslashes($idea->getMembers())."\"";
            echo "\"".addslashes($idea->getHighestRound())."\",";
            echo "\"".addslashes($idea->getIsPrivate())."\"";
            echo "\n";
        }
    }

	public function sortByVotes(&$ideas, $desc = true, VoteCriteria $criteria = null) {
		usort($ideas, function($a, $b) use ($desc, $criteria) {
			$valueA = $a->getVoteAvg($criteria);
			$valueB = $b->getVoteAvg($criteria);
			if($valueA == $valueB ) { return 0; }

			if($desc)
				return ($valueA < $valueB) ? 1 : -1;
			else
				return ($valueA < $valueB) ? -1 : 1;
		});
		return $ideas;
	}

    public function sortByFollows(&$ideas) {
        usort($ideas, function($a, $b) {
                $valueA = $a->getNumFollowers();
                $valueB = $b->getNumFollowers();
                if($valueA == $valueB )
                    return 0;
                return ($valueA < $valueB) ? 1 : -1;
            });
        return $ideas;
    }

    public function sortByCreatedAt(&$ideas) {
        usort($ideas, function($a, $b) {
                $valueA = $a->getCreatedAt();
                $valueB = $b->getCreatedAt();
                if($valueA == $valueB )
                    return 0;
                return ($valueA < $valueB) ? 1 : -1;
            });
        return $ideas;
    }

}
