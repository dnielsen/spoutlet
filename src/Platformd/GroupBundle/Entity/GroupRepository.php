<?php

namespace Platformd\GroupBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Platformd\SpoutletBundle\Entity\Site;
use Platformd\UserBundle\Entity\User;

/**
 * GroupsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GroupRepository extends EntityRepository
{
    public function getAllGroupsForUser($user)
    {
        return $this->getEntityManager()->createQuery('
            SELECT g FROM GroupBundle:Group g
            LEFT JOIN g.members m
            WHERE g.deleted = false
            AND m.id = :userId
            ORDER BY g.name')
            ->setParameter('userId', $user->getId())
            ->execute();
    }

    /**
     * @param User $user
     * @param Site $site
     *
     * @return Group[]
     */
    public function getAllGroupsForUserAndSite(User $user, Site $site)
    {
        $qb = $this->createQueryBuilder('g');

        $qb
            ->select('g, m, s, e, o, er, sp')
            ->innerJoin('g.members', 'm')
            ->innerJoin('g.sites', 's')
            ->innerJoin('g.events', 'e')
            ->innerJoin('g.owner', 'o')
            ->leftJoin('g.entrySetRegistration', 'er')
            ->leftJoin('g.sponsor', 'sp')
            ->where('g.deleted = :isDeleted')
            ->andWhere('m.id = :userId')
            ->andWhere('s.id = :siteId')
            ->orderBy('g.name')
            ->setParameters([
                'userId' => $user->getId(),
                'siteId' => $site->getId(),
                'isDeleted' => false,
            ])
            ->groupBy('g.id')
        ;

        return $qb->getQuery()
            ->setHint(Query::HINT_FORCE_PARTIAL_LOAD, true)
            ->getResult();
    }

    public function getGroupAndMemberCountByRegion() {

        return $this->getEntityManager()->createQuery('
            SELECT s.name region, COUNT(DISTINCT g.id) groups, COUNT(DISTINCT m.id) members FROM GroupBundle:Group g
            LEFT JOIN g.sites s
            LEFT JOIN g.members m
            WHERE g.deleted = false
            GROUP BY s.id')
            ->execute();
    }

    public function findAllGroupsRelevantForSite($site) {

        return $this->getEntityManager()->createQuery('
            SELECT g FROM GroupBundle:Group g
            LEFT JOIN g.sites s
            WHERE g.deleted = false
            AND (g.allLocales = true OR s = :site)')
            ->setParameter('site', $site)
            ->execute();
    }

    public function findAllGroupsRelevantForSiteSorted($site) {

        return $this->getEntityManager()->createQuery('
            SELECT g FROM GroupBundle:Group g
            LEFT JOIN g.sites s
            WHERE g.deleted = false
            AND (g.allLocales = true OR s = :site)
            ORDER BY g.name ASC')
            ->setParameter('site', $site)
            ->execute();
    }

    public function findAllLocationGroupsRelevantForSite($site) {

        return $this->getEntityManager()->createQuery('
            SELECT g, sponsor, location, communitySite FROM GroupBundle:Group g
            LEFT JOIN g.sites s
            LEFT JOIN g.sponsor sponsor
            LEFT JOIN g.location location
            LEFT JOIN g.communitySite communitySite
            WHERE g.deleted = false
            AND g.category = :location
            AND (g.allLocales = true OR s = :site)')
            ->setParameter('site', $site)
            ->setParameter('location', 'location')
            ->execute();
    }

    public function findGroupsByName($groupName)
    {
        $qb = $this->createQueryBuilder('g')
            ->where('g.name like :groupName')
            ->andWhere('g.deleted = false')
            ->setParameter('groupName', '%'.$groupName.'%');

        return $qb->getQuery()->execute();
    }

    public function findGroupsByNameAndSite($groupName, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->where('g.name like :groupName')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->setParameter('groupName', '%'.$groupName.'%')
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function findGroupByRelativeSlugAndSite($relSlug, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->where('g.relativeSlug = :relSlug')
            ->andWhere('s = :site')
            ->andWhere('g.deleted = false')
            ->setParameter('relSlug', $relSlug)
            ->setParameter('site', $site);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function findFeaturedGroupsByCategoryAndSite($category, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g, COUNT(DISTINCT m.id) memberCount')
            ->leftJoin('g.members', 'm')
            ->leftJoin('g.sites', 's')
            ->where('g.category = :category')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->andWhere('g.featured <> 1')
            ->setParameter('category', $category)
            ->setParameter('site', $site)
            ->orderBy('memberCount', 'DESC')
            ->groupBy('g.id');

        return $qb->getQuery()->execute();
    }

    public function findAllGroupsWithMemberCountsByCategoryAndSite($category, $site)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g, COUNT(DISTINCT m.id) memberCount')
            ->leftJoin('g.members', 'm')
            ->leftJoin('g.sites', 's')
            ->where('g.category = :category')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->setParameter('category', $category)
            ->setParameter('site', $site)
            ->orderBy('memberCount', 'DESC')
            ->groupBy('g.id');

        return $qb->getQuery()->execute();
    }

    public function findAllDepartmentsForSite($site)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g')
            ->leftJoin('g.sites', 's')
            ->where('g.category = :category')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->setParameter('category', 'department')
            ->setParameter('site', $site)
            ->orderBy('g.name');

        return $qb->getQuery()->execute();
    }

    public function getFindGroupsQB($groupName, $category, $status, $sites, $startDate="", $endDate="")
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's');

        $siteIds = array();

        foreach ($sites as $site) {
            array_push($siteIds, $site->getId());
        }

        if (count($sites) > 0) {
            $qb->andWhere('(s.id IN (:siteList) OR g.allLocales = true)');
            $qb->setParameter('siteList', $siteIds);
        }

        if ($groupName) {
            $qb->andWhere('g.name like :groupName');
            $qb->setParameter('groupName', '%'.$groupName.'%');
        }

        if ($category) {
            $qb->andWhere('g.category = :category');
            $qb->setParameter('category', $category);
        }

        if ($status) {
            $qb->andWhere('g.deleted = :status');
            $qb->setParameter('status', $status);
        }

        if ($startDate) {

            $startDate->setTime(0, 0, 0);
            $qb->andWhere('g.createdAt >= :startDate');
            $qb->setParameter('startDate', $startDate);
        }

        if ($endDate) {

            $endDate->setTime(23, 59, 59);
            $qb->andWhere('g.createdAt <= :endDate');
            $qb->setParameter('endDate', $endDate);
        }

        $qb->distinct('g.id');

        return $qb;
    }

    public function findGroups(array $filters)
    {
        return $this->getFindGroupsQB($filters['groupName'], $filters['category'], $filters['deleted'], $filters['sites'], $filters['startDate'], $filters['endDate'])
            ->getQuery()
            ->execute()
        ;
    }

    public function getGroupMemberListForExport($groupId)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.members', 'm')
            ->select('m.username', 'm.id', 'm.firstname', 'm.lastname', 'm.email', 'g.name', 'm.country', '(SELECT MAX(a.createdAt) FROM GroupBundle:GroupMembershipAction a WHERE a.group = g AND a.user = m.id)')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $groupId);

        return $qb->getQuery()->execute();
    }

    public function getGroupVideosForExport($groupId)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.videos', 'v')
            ->leftJoin('v.author', 'a')
            ->leftJoin('v.contentReports', 'c')
            ->select('g','a.username', 'a.id', 'a.firstname', 'a.lastname', 'a.email', 'g.name', 'a.country', 'v', 'v.title', 'v.createdAt', 'c', '(SELECT MAX(ma.createdAt) FROM GroupBundle:GroupMembershipAction ma WHERE ma.group = g AND ma.user = a.id)')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $groupId);

        $result = $qb->getQuery()->execute();

        if (!$result || count($result) < 1) {
            return null;
        }

        if (!$result[0][0] || $result[0][0]->getId() < 1) {
            return null;
        }

        return $result[0][0];
    }

    public function getGroupImagesForExport($groupId)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.images', 'i')
            ->leftJoin('i.author', 'a')
            ->leftJoin('i.contentReports', 'c')
            ->select('g', 'a.username', 'a.id', 'a.firstname', 'a.lastname', 'a.email', 'g.name', 'a.country', 'i.title', 'i.createdAt', 'c', 'i', '(SELECT MAX(ma.createdAt) FROM GroupBundle:GroupMembershipAction ma WHERE ma.group = g AND ma.user = a.id)')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $groupId);

        $result = $qb->getQuery()->execute();

        if (!$result || count($result) < 1) {
            return null;
        }

        if (!$result[0][0] || $result[0][0]->getId() < 1) {
            return null;
        }

        return $result[0][0];
    }

    public function getGroupNewsArticlesForExport($groupId)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.newsArticles', 'n')
            ->leftJoin('n.author', 'a')
            ->leftJoin('n.contentReports', 'c')
            ->select('g', 'a.username', 'a.id', 'a.firstname', 'a.lastname', 'a.email', 'g.name', 'a.country', 'n', 'n.title', 'n.createdAt', 'c', '(SELECT MAX(ma.createdAt) FROM GroupBundle:GroupMembershipAction ma WHERE ma.group = g AND ma.user = a.id)')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $groupId);

        $result = $qb->getQuery()->execute();

        if (!$result || count($result) < 1) {
            return null;
        }

        if (!$result[0][0] || $result[0][0]->getId() < 1) {
            return null;
        }

        return $result[0][0];
    }

    public function getGroupDiscussionsForExport($groupId)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.discussions', 'd')
            ->leftJoin('d.author', 'a')
            ->leftJoin('d.contentReports', 'c')
            ->select('g', 'a.username', 'a.id', 'a.firstname', 'a.lastname', 'a.email', 'g.name', 'a.country', 'd', 'd.title', 'd.createdAt', 'c', '(SELECT MAX(ma.createdAt) FROM GroupBundle:GroupMembershipAction ma WHERE ma.group = g AND ma.user = a.id)')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $groupId);

        $result = $qb->getQuery()->execute();

        if (!$result || count($result) < 1) {
            return null;
        }

        if (!$result[0][0] || $result[0][0]->getId() < 1) {
            return null;
        }

        return $result[0][0];
    }

    public function findGroupStatsQB(array $filters = array())
    {
        $filters = array_merge(
            array('groupName' => '', 'category' => '', 'deleted' => '', 'sites' => array(), 'startDate' => '', 'endDate' => ''),
            $filters
        );
        $qb = $this->getFindGroupsQB($filters['groupName'], $filters['category'], $filters['deleted'], $filters['sites'], $filters['startDate'], $filters['endDate'])
            ->addSelect('m', 'o', 's')
            ->leftJoin('g.owner', 'o')
            ->leftJoin('g.membershipActions', 'm')
            ->groupBy('g.id')
            ->distinct(false)
        ;

        return $qb;
    }

    public function findGroupMediaCountsIn($ids)
    {
        if (count($ids) > 0) {

            $return = array();

            $videos = $this->createQueryBuilder('g')
                ->select('g.id', 'COUNT(v.id) videoCount')
                ->leftJoin('g.videos', 'v')
                ->andWhere('g.id IN (:ids)')
                ->groupBy('g.id')
                ->setParameter('ids', $ids)
                ->getQuery()
                ->execute();

            foreach($videos as $groupVideoInfo) {
                $return[$groupVideoInfo['id']]['videoCount'] = $groupVideoInfo['videoCount'];
            }

            $news = $this->createQueryBuilder('g')
                ->select('g.id', 'COUNT(n.id) newsCount')
                ->leftJoin('g.newsArticles', 'n')
                ->andWhere('g.id IN (:ids)')
                ->groupBy('g.id')
                ->setParameter('ids', $ids)
                ->getQuery()
                ->execute();

            foreach($news as $groupNewsInfo) {
                $return[$groupNewsInfo['id']]['newsCount'] = $groupNewsInfo['newsCount'];
            }

            $images = $this->createQueryBuilder('g')
                ->select('g.id', 'COUNT(i.id) imageCount')
                ->leftJoin('g.images', 'i')
                ->andWhere('g.id IN (:ids)')
                ->groupBy('g.id')
                ->setParameter('ids', $ids)
                ->getQuery()
                ->execute();

            foreach($images as $groupImageInfo) {
                $return[$groupImageInfo['id']]['imageCount'] = $groupImageInfo['imageCount'];
            }

            return $return;
        }

        return array();
    }

    public function findGroupMemberCountsIn($ids)
    {
        if (count($ids) > 0) {
            $qb = $this->createQueryBuilder('g')
                ->select('g.id', 'COUNT(m.id) as membercount')
                ->leftJoin('g.members', 'm')
                ->andWhere('g.id IN (:ids)')
                ->setParameter('ids', $ids)
                ->groupBy('g.id');

            return $qb->getQuery()->execute();
        }

        return array();
    }

    public function findGroupStats(array $filters = array())
    {
        return $this->findGroupStatsQB($filters)->getQuery()->execute();
    }

    public function findMostRecentlyCreatedGroupsForSite($site, $limit=8)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.sites', 's')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->addOrderBy('g.createdAt', 'DESC')
            ->setMaxResults($limit)
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function findPopularGroupsForSite($site, $limit=8)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g, sponsor, location, communitySite, COUNT(DISTINCT m.id) member_count')
            ->leftJoin('g.sites', 's')
            ->leftJoin('g.sponsor', 'sponsor')
            ->leftJoin('g.location', 'location')
            ->leftJoin('g.communitySite', 'communitySite')
            ->leftJoin('g.members', 'm')
            ->where('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->addOrderBy('member_count', 'DESC')
            ->groupBy('g.id')
            ->distinct('g.id')
            ->setMaxResults($limit)
            ->setParameter('site', $site);

        return $qb->getQuery()->execute();
    }

    public function getGroupMembers($id)
    {
        $query = '
        SELECT DISTINCT
            fos_user.username,
            pd_group_membership_actions.action,
            Max(
                pd_group_membership_actions.created_at
            ) AS created_at,
            fos_user.id
        FROM
        pd_groups
        INNER JOIN pd_group_membership_actions ON pd_groups.id = pd_group_membership_actions.group_id
        INNER JOIN fos_user ON fos_user.id = pd_group_membership_actions.user_id
        INNER JOIN pd_groups_members ON pd_group_membership_actions.user_id = pd_groups_members.user_id
        WHERE
            pd_group_membership_actions.group_id = :id
        AND
            pd_groups_members.user_id IN (select user_id from pd_group_membership_actions)
        GROUP BY pd_group_membership_actions.user_id
        ORDER BY created_at DESC';

        $stmt = $this->getEntityManager()
                     ->getConnection()
                     ->prepare($query);

        $stmt->bindValue('id', $id);

        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function findAllFeaturedGroupsForSite($site)
    {
        $qb = $this->createQueryBuilder('g')
            ->select('g, COUNT(DISTINCT m.id) memberCount')
            ->leftJoin('g.sites', 's')
            ->leftJoin('g.members', 'm')
            ->where('g.featured = true')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere('g.deleted = false')
            ->addOrderBy('g.featuredAt', 'DESC')
            ->distinct('g.id')
            ->setMaxResults(4)
            ->setParameter('site', $site)
            ->groupBy('g.id');

        return $qb->getQuery()->execute();
    }

    public function findGroupsForFacebookLikesLastUpdatedAt($minutes)
    {
        $date = new \DateTime;
        $date->modify(sprintf('-%d sec', $minutes));

        $qb = $this->createQueryBuilder('g')
            ->addOrderBy('g.facebookLikesUpdatedAt', 'ASC')
            ->addOrderBy('g.id', 'ASC')
            ->andWhere('g.facebookLikesUpdatedAt <= :date OR g.facebookLikesUpdatedAt IS NULL')
            ->setParameter('date', $date);

        return $qb->getQuery()->iterate();
    }

    public function findAllGroupsWhereIdInForSite($groupIds, $site)
    {
        $qb = $this->createQueryBuilder('g');
        return $qb->leftJoin('g.sites', 's')
            ->where($qb->expr()->in('g.id', $groupIds))
            ->andWhere('g.deleted = false')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->setParameter('site', $site)
            ->getQuery()
            ->execute();
    }

    public function findAllGroupsWhereIdNotInForSite($groupIds, $site)
    {
        $qb = $this->createQueryBuilder('g');
        return $qb->leftJoin('g.sites', 's')
            ->where($qb->expr()->notIn('g.id', $groupIds))
            ->andWhere('g.deleted = false')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->setParameter('site', $site)
            ->getQuery()
            ->execute();
    }

    public function findAllOwnedGroupsForContest($user, $entry, $site)
    {
        $groupIds = array(0);

        foreach($entry->getGroups() as $group) {
            array_push($groupIds, $group->getId());
        }

        $qb = $this->createQueryBuilder('g');

        return $qb->leftJoin('g.sites', 's')
            ->where('g.owner = :user')
            ->andWhere('g.deleted = false')
            ->andWhere('(s = :site OR g.allLocales = true)')
            ->andWhere($qb->expr()->notIn('g.id', $groupIds))
            ->setParameter('user', $user)
            ->setParameter('site', $site)
            ->getQuery()
            ->execute();
    }

    public function findGroupWinnersForContest($contest)
    {
        $ids = count($contest->getWinners()) > 0 ? $contest->getWinners() : array(0);
        $qb  = $this->createQueryBuilder('g');

        return $qb->where($qb->expr()->in('g.id', $ids))
            ->getQuery()
            ->execute();
    }


    public function getAutoCompleteResultsByGroupName($groupName)
    {
        return $this->createQueryBuilder('g')
            ->select('g.id as value, g.name as label')
            ->where('g.name like :groupName')
            ->setParameter('groupName', '%' . $groupName . '%')
            ->getQuery()
            ->execute();
    }

    public function getMembershipCountByGroup($group)
    {
        $result = $this->createQueryBuilder('g')
            ->select('COUNT(m.id) as membershipCount')
            ->leftJoin('g.members', 'm')
            ->where('g.id = :groupId')
            ->setParameter('groupId', $group->getId())
            ->getQuery()
            ->execute();

        return $result[0]['membershipCount'];
    }

    public function isUserMemberOfGroup($user, $group)
    {
        return $this->createQueryBuilder('g')
            ->select('COUNT(m.id) as isMember')
            ->leftJoin('g.members', 'm')
            ->andWhere('m.id = :userId')
            ->andWhere('g.id = :groupId')
            ->setParameter('userId', $user->getId())
            ->setParameter('groupId', $group->getId())
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function findGroupsForImage($media)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.images', 'i')
            ->where('i = :media')
            ->andWhere('g.deleted = false')
            ->setParameter('media', $media);

        return $qb->getQuery()->execute();
    }

    public function findGroupsForVideo($media)
    {
        $qb = $this->createQueryBuilder('g')
            ->leftJoin('g.videos', 'v')
            ->where('v = :media')
            ->andWhere('g.deleted = false')
            ->setParameter('media', $media);

        return $qb->getQuery()->execute();
    }

    /**
     * @param User $user
     *
     * @return Group[]
     */
    public function getUserDepartments(User $user)
    {
        $qb = $this->createQueryBuilder('d');

        $qb
            ->addSelect('s, o, sr, e, et, ge, get')
            ->innerJoin('d.sponsor', 's')
            ->innerJoin('d.owner', 'o')
            ->innerJoin('s.sponsorRegistrations', 'sr')
            ->leftJoin('sr.event', 'e')
            ->leftJoin('e.translations', 'et')
            ->leftJoin('sr.global_event', 'ge')
            ->leftJoin('ge.translations', 'get')
            ->where('d.owner = :owner')
            ->setParameter('owner', $user)
        ;

        return $qb->getQuery()
            ->getResult();
    }
}
